class ApplicationVersion {
   Integer major
   Integer minor
   Integer patch

   ApplicationVersion(Integer major, Integer minor, Integer patch) {
      this.major = major
      this.minor = minor
      this.patch = patch
   }


   String getVersion() {
      return "$major.$minor.$patch"
   }
}

ext.loadVersion = { ->

   def versionPropertiesFile = file('gradle.properties')

   if(!versionPropertiesFile.exists()) {
      throw new Exception('No build.properties file found')
   }

   Properties versionProperties = new Properties()

   versionPropertiesFile.withInputStream { stream ->
      versionProperties.load(stream)
   }
   return new ApplicationVersion(versionProperties.major.toInteger(),
                           versionProperties.minor.toInteger(),
                           versionProperties.patch.toInteger())

}

task majorVersionUpdate(group: 'versioning', description: 'Bump to next major version') {
   doFirst {
      def versionFile = file('gradle.properties')
      ant.propertyfile(file: versionFile) {
         entry(key: 'major', type: 'int', operation: '+', value: 1)
         entry(key: 'minor', type: 'int', operation: '=', value: 0)
         entry(key: 'patch', type: 'int', operation: '=', value: 0)
      }
   }
}

task minorVersionUpdate(group: 'versioning', description: 'Bump to next minor version') {
   doFirst {
      def versionFile = file('gradle.properties')
      ant.propertyfile(file: versionFile) {
         entry(key: 'minor', type: 'int', operation: '+', value: 1)
         entry(key: 'patch', type: 'int', operation: '=', value: 0)
      }
   }
}

task patchVersionUpdate(group: 'versioning', description: 'Bump to next patch version') {
   doFirst {
      def versionFile = file('gradle.properties')
      ant.propertyfile(file: versionFile) {
         entry(key: 'patch', type: 'int', operation: '+', value: 1)
      }
   }
}